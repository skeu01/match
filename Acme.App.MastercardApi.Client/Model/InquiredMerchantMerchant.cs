/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// InquiredMerchantMerchant
    /// </summary>
    [DataContract(Name = "InquiredMerchant_Merchant")]
    public partial class InquiredMerchantMerchant : IEquatable<InquiredMerchantMerchant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InquiredMerchantMerchant" /> class.
        /// </summary>
        /// <param name="name">The name of the Business which has been terminated..</param>
        /// <param name="doingBusinessAsName">The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.</param>
        /// <param name="addedByAcquirerID">The Member ICA that has added the merchant to the MATCH system.</param>
        /// <param name="addedOnDate">The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY.</param>
        /// <param name="phoneNumber">The Business or Merchant&#39;s phone number..</param>
        /// <param name="altPhoneNumber">The Business or Merchant&#39;s alternate phone number..</param>
        /// <param name="address">address.</param>
        /// <param name="countrySubdivisionTaxId">The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden..</param>
        /// <param name="nationalTaxId">The National tax ID or business registration number. Return value will be hidden..</param>
        /// <param name="serviceProvLegal">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="serviceProvDBA">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="terminationReasonCode">A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft.</param>
        /// <param name="urlGroup">urlGroup.</param>
        /// <param name="url">url.</param>
        /// <param name="principal">principal.</param>
        /// <param name="searchCriteria">searchCriteria.</param>
        /// <param name="merchantMatch">merchantMatch.</param>
        public InquiredMerchantMerchant(string name = default(string), string doingBusinessAsName = default(string), string addedByAcquirerID = default(string), string addedOnDate = default(string), string phoneNumber = default(string), string altPhoneNumber = default(string), Address address = default(Address), string countrySubdivisionTaxId = default(string), string nationalTaxId = default(string), string serviceProvLegal = default(string), string serviceProvDBA = default(string), string terminationReasonCode = default(string), List<UrlGroup> urlGroup = default(List<UrlGroup>), List<Url> url = default(List<Url>), List<Principal> principal = default(List<Principal>), SearchCriteria searchCriteria = default(SearchCriteria), MerchantMatch merchantMatch = default(MerchantMatch))
        {
            this.Name = name;
            this.DoingBusinessAsName = doingBusinessAsName;
            this.AddedByAcquirerID = addedByAcquirerID;
            this.AddedOnDate = addedOnDate;
            this.PhoneNumber = phoneNumber;
            this.AltPhoneNumber = altPhoneNumber;
            this.Address = address;
            this.CountrySubdivisionTaxId = countrySubdivisionTaxId;
            this.NationalTaxId = nationalTaxId;
            this.ServiceProvLegal = serviceProvLegal;
            this.ServiceProvDBA = serviceProvDBA;
            this.TerminationReasonCode = terminationReasonCode;
            this.UrlGroup = urlGroup;
            this.Url = url;
            this.Principal = principal;
            this.SearchCriteria = searchCriteria;
            this.MerchantMatch = merchantMatch;
        }

        /// <summary>
        /// The name of the Business which has been terminated.
        /// </summary>
        /// <value>The name of the Business which has been terminated.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
        /// </summary>
        /// <value>The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop</value>
        [DataMember(Name = "DoingBusinessAsName", EmitDefaultValue = false)]
        public string DoingBusinessAsName { get; set; }

        /// <summary>
        /// The Member ICA that has added the merchant to the MATCH system
        /// </summary>
        /// <value>The Member ICA that has added the merchant to the MATCH system</value>
        [DataMember(Name = "AddedByAcquirerID", EmitDefaultValue = false)]
        public string AddedByAcquirerID { get; set; }

        /// <summary>
        /// The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY
        /// </summary>
        /// <value>The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY</value>
        [DataMember(Name = "AddedOnDate", EmitDefaultValue = false)]
        public string AddedOnDate { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s phone number.</value>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s alternate phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s alternate phone number.</value>
        [DataMember(Name = "AltPhoneNumber", EmitDefaultValue = false)]
        public string AltPhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
        /// </summary>
        /// <value>The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.</value>
        [DataMember(Name = "CountrySubdivisionTaxId", EmitDefaultValue = false)]
        public string CountrySubdivisionTaxId { get; set; }

        /// <summary>
        /// The National tax ID or business registration number. Return value will be hidden.
        /// </summary>
        /// <value>The National tax ID or business registration number. Return value will be hidden.</value>
        [DataMember(Name = "NationalTaxId", EmitDefaultValue = false)]
        public string NationalTaxId { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvLegal", EmitDefaultValue = false)]
        public string ServiceProvLegal { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvDBA", EmitDefaultValue = false)]
        public string ServiceProvDBA { get; set; }

        /// <summary>
        /// A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
        /// </summary>
        /// <value>A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft</value>
        [DataMember(Name = "TerminationReasonCode", EmitDefaultValue = false)]
        public string TerminationReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets UrlGroup
        /// </summary>
        [DataMember(Name = "UrlGroup", EmitDefaultValue = false)]
        public List<UrlGroup> UrlGroup { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public List<Url> Url { get; set; }

        /// <summary>
        /// Gets or Sets Principal
        /// </summary>
        [DataMember(Name = "Principal", EmitDefaultValue = false)]
        public List<Principal> Principal { get; set; }

        /// <summary>
        /// Gets or Sets SearchCriteria
        /// </summary>
        [DataMember(Name = "SearchCriteria", EmitDefaultValue = false)]
        public SearchCriteria SearchCriteria { get; set; }

        /// <summary>
        /// Gets or Sets MerchantMatch
        /// </summary>
        [DataMember(Name = "MerchantMatch", EmitDefaultValue = false)]
        public MerchantMatch MerchantMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InquiredMerchantMerchant {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DoingBusinessAsName: ").Append(DoingBusinessAsName).Append("\n");
            sb.Append("  AddedByAcquirerID: ").Append(AddedByAcquirerID).Append("\n");
            sb.Append("  AddedOnDate: ").Append(AddedOnDate).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AltPhoneNumber: ").Append(AltPhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CountrySubdivisionTaxId: ").Append(CountrySubdivisionTaxId).Append("\n");
            sb.Append("  NationalTaxId: ").Append(NationalTaxId).Append("\n");
            sb.Append("  ServiceProvLegal: ").Append(ServiceProvLegal).Append("\n");
            sb.Append("  ServiceProvDBA: ").Append(ServiceProvDBA).Append("\n");
            sb.Append("  TerminationReasonCode: ").Append(TerminationReasonCode).Append("\n");
            sb.Append("  UrlGroup: ").Append(UrlGroup).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  MerchantMatch: ").Append(MerchantMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InquiredMerchantMerchant);
        }

        /// <summary>
        /// Returns true if InquiredMerchantMerchant instances are equal
        /// </summary>
        /// <param name="input">Instance of InquiredMerchantMerchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InquiredMerchantMerchant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DoingBusinessAsName == input.DoingBusinessAsName ||
                    (this.DoingBusinessAsName != null &&
                    this.DoingBusinessAsName.Equals(input.DoingBusinessAsName))
                ) && 
                (
                    this.AddedByAcquirerID == input.AddedByAcquirerID ||
                    (this.AddedByAcquirerID != null &&
                    this.AddedByAcquirerID.Equals(input.AddedByAcquirerID))
                ) && 
                (
                    this.AddedOnDate == input.AddedOnDate ||
                    (this.AddedOnDate != null &&
                    this.AddedOnDate.Equals(input.AddedOnDate))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.AltPhoneNumber == input.AltPhoneNumber ||
                    (this.AltPhoneNumber != null &&
                    this.AltPhoneNumber.Equals(input.AltPhoneNumber))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CountrySubdivisionTaxId == input.CountrySubdivisionTaxId ||
                    (this.CountrySubdivisionTaxId != null &&
                    this.CountrySubdivisionTaxId.Equals(input.CountrySubdivisionTaxId))
                ) && 
                (
                    this.NationalTaxId == input.NationalTaxId ||
                    (this.NationalTaxId != null &&
                    this.NationalTaxId.Equals(input.NationalTaxId))
                ) && 
                (
                    this.ServiceProvLegal == input.ServiceProvLegal ||
                    (this.ServiceProvLegal != null &&
                    this.ServiceProvLegal.Equals(input.ServiceProvLegal))
                ) && 
                (
                    this.ServiceProvDBA == input.ServiceProvDBA ||
                    (this.ServiceProvDBA != null &&
                    this.ServiceProvDBA.Equals(input.ServiceProvDBA))
                ) && 
                (
                    this.TerminationReasonCode == input.TerminationReasonCode ||
                    (this.TerminationReasonCode != null &&
                    this.TerminationReasonCode.Equals(input.TerminationReasonCode))
                ) && 
                (
                    this.UrlGroup == input.UrlGroup ||
                    this.UrlGroup != null &&
                    input.UrlGroup != null &&
                    this.UrlGroup.SequenceEqual(input.UrlGroup)
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url != null &&
                    input.Url != null &&
                    this.Url.SequenceEqual(input.Url)
                ) && 
                (
                    this.Principal == input.Principal ||
                    this.Principal != null &&
                    input.Principal != null &&
                    this.Principal.SequenceEqual(input.Principal)
                ) && 
                (
                    this.SearchCriteria == input.SearchCriteria ||
                    (this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(input.SearchCriteria))
                ) && 
                (
                    this.MerchantMatch == input.MerchantMatch ||
                    (this.MerchantMatch != null &&
                    this.MerchantMatch.Equals(input.MerchantMatch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAsName != null)
                    hashCode = hashCode * 59 + this.DoingBusinessAsName.GetHashCode();
                if (this.AddedByAcquirerID != null)
                    hashCode = hashCode * 59 + this.AddedByAcquirerID.GetHashCode();
                if (this.AddedOnDate != null)
                    hashCode = hashCode * 59 + this.AddedOnDate.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.AltPhoneNumber != null)
                    hashCode = hashCode * 59 + this.AltPhoneNumber.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.CountrySubdivisionTaxId != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisionTaxId.GetHashCode();
                if (this.NationalTaxId != null)
                    hashCode = hashCode * 59 + this.NationalTaxId.GetHashCode();
                if (this.ServiceProvLegal != null)
                    hashCode = hashCode * 59 + this.ServiceProvLegal.GetHashCode();
                if (this.ServiceProvDBA != null)
                    hashCode = hashCode * 59 + this.ServiceProvDBA.GetHashCode();
                if (this.TerminationReasonCode != null)
                    hashCode = hashCode * 59 + this.TerminationReasonCode.GetHashCode();
                if (this.UrlGroup != null)
                    hashCode = hashCode * 59 + this.UrlGroup.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Principal != null)
                    hashCode = hashCode * 59 + this.Principal.GetHashCode();
                if (this.SearchCriteria != null)
                    hashCode = hashCode * 59 + this.SearchCriteria.GetHashCode();
                if (this.MerchantMatch != null)
                    hashCode = hashCode * 59 + this.MerchantMatch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
