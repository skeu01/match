/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// PrincipalMatch
    /// </summary>
    [DataContract(Name = "PrincipalMatch")]
    public partial class PrincipalMatch : IEquatable<PrincipalMatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalMatch" /> class.
        /// </summary>
        /// <param name="name">The name of the Business which has been terminated..</param>
        /// <param name="address">Address of the merchant location..</param>
        /// <param name="phoneNumber">The Business or Merchant&#39;s phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes..</param>
        /// <param name="altPhoneNumber">The Business or Merchant&#39;s alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes..</param>
        /// <param name="nationalId">The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number..</param>
        /// <param name="driversLicense">The drivers license number of a principal owner. owner is not from the U.S. Region, then use their national ID card number..</param>
        public PrincipalMatch(string name = default(string), string address = default(string), string phoneNumber = default(string), string altPhoneNumber = default(string), string nationalId = default(string), string driversLicense = default(string))
        {
            this.Name = name;
            this.Address = address;
            this.PhoneNumber = phoneNumber;
            this.AltPhoneNumber = altPhoneNumber;
            this.NationalId = nationalId;
            this.DriversLicense = driversLicense;
        }

        /// <summary>
        /// The name of the Business which has been terminated.
        /// </summary>
        /// <value>The name of the Business which has been terminated.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Address of the merchant location.
        /// </summary>
        /// <value>Address of the merchant location.</value>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
        /// </summary>
        /// <value>The Business or Merchant&#39;s phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.</value>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
        /// </summary>
        /// <value>The Business or Merchant&#39;s alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.</value>
        [DataMember(Name = "AltPhoneNumber", EmitDefaultValue = false)]
        public string AltPhoneNumber { get; set; }

        /// <summary>
        /// The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.
        /// </summary>
        /// <value>The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.</value>
        [DataMember(Name = "NationalId", EmitDefaultValue = false)]
        public string NationalId { get; set; }

        /// <summary>
        /// The drivers license number of a principal owner. owner is not from the U.S. Region, then use their national ID card number.
        /// </summary>
        /// <value>The drivers license number of a principal owner. owner is not from the U.S. Region, then use their national ID card number.</value>
        [DataMember(Name = "DriversLicense", EmitDefaultValue = false)]
        public string DriversLicense { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrincipalMatch {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AltPhoneNumber: ").Append(AltPhoneNumber).Append("\n");
            sb.Append("  NationalId: ").Append(NationalId).Append("\n");
            sb.Append("  DriversLicense: ").Append(DriversLicense).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrincipalMatch);
        }

        /// <summary>
        /// Returns true if PrincipalMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of PrincipalMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrincipalMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.AltPhoneNumber == input.AltPhoneNumber ||
                    (this.AltPhoneNumber != null &&
                    this.AltPhoneNumber.Equals(input.AltPhoneNumber))
                ) && 
                (
                    this.NationalId == input.NationalId ||
                    (this.NationalId != null &&
                    this.NationalId.Equals(input.NationalId))
                ) && 
                (
                    this.DriversLicense == input.DriversLicense ||
                    (this.DriversLicense != null &&
                    this.DriversLicense.Equals(input.DriversLicense))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.AltPhoneNumber != null)
                    hashCode = hashCode * 59 + this.AltPhoneNumber.GetHashCode();
                if (this.NationalId != null)
                    hashCode = hashCode * 59 + this.NationalId.GetHashCode();
                if (this.DriversLicense != null)
                    hashCode = hashCode * 59 + this.DriversLicense.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
