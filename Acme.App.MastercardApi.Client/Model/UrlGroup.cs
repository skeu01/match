/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// UrlGroup
    /// </summary>
    [DataContract(Name = "UrlGroup")]
    public partial class UrlGroup : IEquatable<UrlGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlGroup" /> class.
        /// </summary>
        /// <param name="exactMatchUrls">exactMatchUrls.</param>
        /// <param name="closeMatchUrls">closeMatchUrls.</param>
        /// <param name="noMatchUrls">noMatchUrls.</param>
        public UrlGroup(Url exactMatchUrls = default(Url), Url closeMatchUrls = default(Url), Url noMatchUrls = default(Url))
        {
            this.ExactMatchUrls = exactMatchUrls;
            this.CloseMatchUrls = closeMatchUrls;
            this.NoMatchUrls = noMatchUrls;
        }

        /// <summary>
        /// Gets or Sets ExactMatchUrls
        /// </summary>
        [DataMember(Name = "ExactMatchUrls", EmitDefaultValue = false)]
        public Url ExactMatchUrls { get; set; }

        /// <summary>
        /// Gets or Sets CloseMatchUrls
        /// </summary>
        [DataMember(Name = "CloseMatchUrls", EmitDefaultValue = false)]
        public Url CloseMatchUrls { get; set; }

        /// <summary>
        /// Gets or Sets NoMatchUrls
        /// </summary>
        [DataMember(Name = "NoMatchUrls", EmitDefaultValue = false)]
        public Url NoMatchUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UrlGroup {\n");
            sb.Append("  ExactMatchUrls: ").Append(ExactMatchUrls).Append("\n");
            sb.Append("  CloseMatchUrls: ").Append(CloseMatchUrls).Append("\n");
            sb.Append("  NoMatchUrls: ").Append(NoMatchUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlGroup);
        }

        /// <summary>
        /// Returns true if UrlGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExactMatchUrls == input.ExactMatchUrls ||
                    (this.ExactMatchUrls != null &&
                    this.ExactMatchUrls.Equals(input.ExactMatchUrls))
                ) && 
                (
                    this.CloseMatchUrls == input.CloseMatchUrls ||
                    (this.CloseMatchUrls != null &&
                    this.CloseMatchUrls.Equals(input.CloseMatchUrls))
                ) && 
                (
                    this.NoMatchUrls == input.NoMatchUrls ||
                    (this.NoMatchUrls != null &&
                    this.NoMatchUrls.Equals(input.NoMatchUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExactMatchUrls != null)
                    hashCode = hashCode * 59 + this.ExactMatchUrls.GetHashCode();
                if (this.CloseMatchUrls != null)
                    hashCode = hashCode * 59 + this.CloseMatchUrls.GetHashCode();
                if (this.NoMatchUrls != null)
                    hashCode = hashCode * 59 + this.NoMatchUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
