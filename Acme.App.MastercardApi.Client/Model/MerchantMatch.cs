/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// MerchantMatch
    /// </summary>
    [DataContract(Name = "MerchantMatch")]
    public partial class MerchantMatch : IEquatable<MerchantMatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantMatch" /> class.
        /// </summary>
        /// <param name="name">The name of the Business which has been terminated..</param>
        /// <param name="doingBusinessAsName">The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.</param>
        /// <param name="phoneNumber">The Business or Merchant&#39;s phone number..</param>
        /// <param name="address">Address of the merchant location.</param>
        /// <param name="altPhoneNumber">The Business or Merchant&#39;s alternate phone number..</param>
        /// <param name="countrySubdivisionTaxId">The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden..</param>
        /// <param name="nationalTaxId">The National tax ID or business registration number. Return value will be hidden..</param>
        /// <param name="serviceProvLegal">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="serviceProvDBA">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="principalMatch">principalMatch.</param>
        /// <param name="urlMatch">urlMatch.</param>
        public MerchantMatch(string name = default(string), string doingBusinessAsName = default(string), string phoneNumber = default(string), string address = default(string), string altPhoneNumber = default(string), string countrySubdivisionTaxId = default(string), string nationalTaxId = default(string), string serviceProvLegal = default(string), string serviceProvDBA = default(string), List<PrincipalMatch> principalMatch = default(List<PrincipalMatch>), List<UrlMatch> urlMatch = default(List<UrlMatch>))
        {
            this.Name = name;
            this.DoingBusinessAsName = doingBusinessAsName;
            this.PhoneNumber = phoneNumber;
            this.Address = address;
            this.AltPhoneNumber = altPhoneNumber;
            this.CountrySubdivisionTaxId = countrySubdivisionTaxId;
            this.NationalTaxId = nationalTaxId;
            this.ServiceProvLegal = serviceProvLegal;
            this.ServiceProvDBA = serviceProvDBA;
            this.PrincipalMatch = principalMatch;
            this.UrlMatch = urlMatch;
        }

        /// <summary>
        /// The name of the Business which has been terminated.
        /// </summary>
        /// <value>The name of the Business which has been terminated.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
        /// </summary>
        /// <value>The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop</value>
        [DataMember(Name = "DoingBusinessAsName", EmitDefaultValue = false)]
        public string DoingBusinessAsName { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s phone number.</value>
        [DataMember(Name = "PhoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Address of the merchant location
        /// </summary>
        /// <value>Address of the merchant location</value>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s alternate phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s alternate phone number.</value>
        [DataMember(Name = "AltPhoneNumber", EmitDefaultValue = false)]
        public string AltPhoneNumber { get; set; }

        /// <summary>
        /// The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
        /// </summary>
        /// <value>The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.</value>
        [DataMember(Name = "CountrySubdivisionTaxId", EmitDefaultValue = false)]
        public string CountrySubdivisionTaxId { get; set; }

        /// <summary>
        /// The National tax ID or business registration number. Return value will be hidden.
        /// </summary>
        /// <value>The National tax ID or business registration number. Return value will be hidden.</value>
        [DataMember(Name = "NationalTaxId", EmitDefaultValue = false)]
        public string NationalTaxId { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvLegal", EmitDefaultValue = false)]
        public string ServiceProvLegal { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvDBA", EmitDefaultValue = false)]
        public string ServiceProvDBA { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalMatch
        /// </summary>
        [DataMember(Name = "PrincipalMatch", EmitDefaultValue = false)]
        public List<PrincipalMatch> PrincipalMatch { get; set; }

        /// <summary>
        /// Gets or Sets UrlMatch
        /// </summary>
        [DataMember(Name = "UrlMatch", EmitDefaultValue = false)]
        public List<UrlMatch> UrlMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantMatch {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DoingBusinessAsName: ").Append(DoingBusinessAsName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AltPhoneNumber: ").Append(AltPhoneNumber).Append("\n");
            sb.Append("  CountrySubdivisionTaxId: ").Append(CountrySubdivisionTaxId).Append("\n");
            sb.Append("  NationalTaxId: ").Append(NationalTaxId).Append("\n");
            sb.Append("  ServiceProvLegal: ").Append(ServiceProvLegal).Append("\n");
            sb.Append("  ServiceProvDBA: ").Append(ServiceProvDBA).Append("\n");
            sb.Append("  PrincipalMatch: ").Append(PrincipalMatch).Append("\n");
            sb.Append("  UrlMatch: ").Append(UrlMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantMatch);
        }

        /// <summary>
        /// Returns true if MerchantMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantMatch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DoingBusinessAsName == input.DoingBusinessAsName ||
                    (this.DoingBusinessAsName != null &&
                    this.DoingBusinessAsName.Equals(input.DoingBusinessAsName))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AltPhoneNumber == input.AltPhoneNumber ||
                    (this.AltPhoneNumber != null &&
                    this.AltPhoneNumber.Equals(input.AltPhoneNumber))
                ) && 
                (
                    this.CountrySubdivisionTaxId == input.CountrySubdivisionTaxId ||
                    (this.CountrySubdivisionTaxId != null &&
                    this.CountrySubdivisionTaxId.Equals(input.CountrySubdivisionTaxId))
                ) && 
                (
                    this.NationalTaxId == input.NationalTaxId ||
                    (this.NationalTaxId != null &&
                    this.NationalTaxId.Equals(input.NationalTaxId))
                ) && 
                (
                    this.ServiceProvLegal == input.ServiceProvLegal ||
                    (this.ServiceProvLegal != null &&
                    this.ServiceProvLegal.Equals(input.ServiceProvLegal))
                ) && 
                (
                    this.ServiceProvDBA == input.ServiceProvDBA ||
                    (this.ServiceProvDBA != null &&
                    this.ServiceProvDBA.Equals(input.ServiceProvDBA))
                ) && 
                (
                    this.PrincipalMatch == input.PrincipalMatch ||
                    this.PrincipalMatch != null &&
                    input.PrincipalMatch != null &&
                    this.PrincipalMatch.SequenceEqual(input.PrincipalMatch)
                ) && 
                (
                    this.UrlMatch == input.UrlMatch ||
                    this.UrlMatch != null &&
                    input.UrlMatch != null &&
                    this.UrlMatch.SequenceEqual(input.UrlMatch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAsName != null)
                    hashCode = hashCode * 59 + this.DoingBusinessAsName.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AltPhoneNumber != null)
                    hashCode = hashCode * 59 + this.AltPhoneNumber.GetHashCode();
                if (this.CountrySubdivisionTaxId != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisionTaxId.GetHashCode();
                if (this.NationalTaxId != null)
                    hashCode = hashCode * 59 + this.NationalTaxId.GetHashCode();
                if (this.ServiceProvLegal != null)
                    hashCode = hashCode * 59 + this.ServiceProvLegal.GetHashCode();
                if (this.ServiceProvDBA != null)
                    hashCode = hashCode * 59 + this.ServiceProvDBA.GetHashCode();
                if (this.PrincipalMatch != null)
                    hashCode = hashCode * 59 + this.PrincipalMatch.GetHashCode();
                if (this.UrlMatch != null)
                    hashCode = hashCode * 59 + this.UrlMatch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
