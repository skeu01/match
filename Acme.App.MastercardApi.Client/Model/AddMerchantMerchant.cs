/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// AddMerchantMerchant
    /// </summary>
    [DataContract(Name = "AddMerchantMerchant")]
    public partial class AddMerchantMerchant : IEquatable<AddMerchantMerchant>, IValidatableObject
    {
        /// <summary>
        /// Cardholder-activated terminal indicator.
        /// </summary>
        /// <value>Cardholder-activated terminal indicator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CATFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2

        }


        /// <summary>
        /// Cardholder-activated terminal indicator.
        /// </summary>
        /// <value>Cardholder-activated terminal indicator.</value>
        [DataMember(Name = "CATFlag", IsRequired = true, EmitDefaultValue = false)]
        public CATFlagEnum CATFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMerchantMerchant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddMerchantMerchant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMerchantMerchant" /> class.
        /// </summary>
        /// <param name="name">The name of the Business which has been terminated. (required).</param>
        /// <param name="doingBusinessAsName">The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.</param>
        /// <param name="merchantId">The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique and Merchant Id should be less than 15 characters. (required).</param>
        /// <param name="merchantCategory">A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant. (required).</param>
        /// <param name="address">address.</param>
        /// <param name="phoneNumber">The Business or Merchant&#39;s phone number. (required).</param>
        /// <param name="altPhoneNumber">The Business or Merchant&#39;s alternate phone number..</param>
        /// <param name="nationalTaxId">The National tax ID or business registration number. Return value will be hidden..</param>
        /// <param name="countrySubdivisionTaxId">The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden..</param>
        /// <param name="cATFlag">Cardholder-activated terminal indicator. (required).</param>
        /// <param name="dateOpened">Date the merchant entered into agreement with the acquirer (required).</param>
        /// <param name="dateClosed">Date the agreement was terminated with the merchant (required).</param>
        /// <param name="serviceProvLegal">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="serviceProvDBA">The name of the service provider associated with the merchant listed in the MATCH..</param>
        /// <param name="url">Website address of the merchant. A request may include multiple URLs . The total cumulative size of the URLs cannot exceed 20000 bytes..</param>
        /// <param name="principal">principal.</param>
        /// <param name="reasonCode">A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft (required).</param>
        /// <param name="comments">Brief comments on why Merchant is added.</param>
        public AddMerchantMerchant(string name = default(string), string doingBusinessAsName = default(string), string merchantId = default(string), string merchantCategory = default(string), Address address = default(Address), string phoneNumber = default(string), string altPhoneNumber = default(string), string nationalTaxId = default(string), string countrySubdivisionTaxId = default(string), CATFlagEnum cATFlag = default(CATFlagEnum), string dateOpened = default(string), string dateClosed = default(string), string serviceProvLegal = default(string), string serviceProvDBA = default(string), List<string> url = default(List<string>), List<Principal> principal = default(List<Principal>), string reasonCode = default(string), string comments = default(string))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for AddMerchantMerchant and cannot be null");
            // to ensure "merchantId" is required (not null)
            this.MerchantId = merchantId ?? throw new ArgumentNullException("merchantId is a required property for AddMerchantMerchant and cannot be null");
            // to ensure "merchantCategory" is required (not null)
            this.MerchantCategory = merchantCategory ?? throw new ArgumentNullException("merchantCategory is a required property for AddMerchantMerchant and cannot be null");
            // to ensure "phoneNumber" is required (not null)
            this.PhoneNumber = phoneNumber ?? throw new ArgumentNullException("phoneNumber is a required property for AddMerchantMerchant and cannot be null");
            this.CATFlag = cATFlag;
            // to ensure "dateOpened" is required (not null)
            this.DateOpened = dateOpened ?? throw new ArgumentNullException("dateOpened is a required property for AddMerchantMerchant and cannot be null");
            // to ensure "dateClosed" is required (not null)
            this.DateClosed = dateClosed ?? throw new ArgumentNullException("dateClosed is a required property for AddMerchantMerchant and cannot be null");
            // to ensure "reasonCode" is required (not null)
            this.ReasonCode = reasonCode ?? throw new ArgumentNullException("reasonCode is a required property for AddMerchantMerchant and cannot be null");
            this.DoingBusinessAsName = doingBusinessAsName;
            this.Address = address;
            this.AltPhoneNumber = altPhoneNumber;
            this.NationalTaxId = nationalTaxId;
            this.CountrySubdivisionTaxId = countrySubdivisionTaxId;
            this.ServiceProvLegal = serviceProvLegal;
            this.ServiceProvDBA = serviceProvDBA;
            this.Url = url;
            this.Principal = principal;
            this.Comments = comments;
        }

        /// <summary>
        /// The name of the Business which has been terminated.
        /// </summary>
        /// <value>The name of the Business which has been terminated.</value>
        [DataMember(Name = "Name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
        /// </summary>
        /// <value>The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop</value>
        [DataMember(Name = "DoingBusinessAsName", EmitDefaultValue = false)]
        public string DoingBusinessAsName { get; set; }

        /// <summary>
        /// The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique and Merchant Id should be less than 15 characters.
        /// </summary>
        /// <value>The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique and Merchant Id should be less than 15 characters.</value>
        [DataMember(Name = "MerchantId", IsRequired = true, EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.
        /// </summary>
        /// <value>A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.</value>
        [DataMember(Name = "MerchantCategory", IsRequired = true, EmitDefaultValue = false)]
        public string MerchantCategory { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s phone number.</value>
        [DataMember(Name = "PhoneNumber", IsRequired = true, EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The Business or Merchant&#39;s alternate phone number.
        /// </summary>
        /// <value>The Business or Merchant&#39;s alternate phone number.</value>
        [DataMember(Name = "AltPhoneNumber", EmitDefaultValue = false)]
        public string AltPhoneNumber { get; set; }

        /// <summary>
        /// The National tax ID or business registration number. Return value will be hidden.
        /// </summary>
        /// <value>The National tax ID or business registration number. Return value will be hidden.</value>
        [DataMember(Name = "NationalTaxId", EmitDefaultValue = false)]
        public string NationalTaxId { get; set; }

        /// <summary>
        /// The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
        /// </summary>
        /// <value>The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.</value>
        [DataMember(Name = "CountrySubdivisionTaxId", EmitDefaultValue = false)]
        public string CountrySubdivisionTaxId { get; set; }

        /// <summary>
        /// Date the merchant entered into agreement with the acquirer
        /// </summary>
        /// <value>Date the merchant entered into agreement with the acquirer</value>
        [DataMember(Name = "DateOpened", IsRequired = true, EmitDefaultValue = false)]
        public string DateOpened { get; set; }

        /// <summary>
        /// Date the agreement was terminated with the merchant
        /// </summary>
        /// <value>Date the agreement was terminated with the merchant</value>
        [DataMember(Name = "DateClosed", IsRequired = true, EmitDefaultValue = false)]
        public string DateClosed { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvLegal", EmitDefaultValue = false)]
        public string ServiceProvLegal { get; set; }

        /// <summary>
        /// The name of the service provider associated with the merchant listed in the MATCH.
        /// </summary>
        /// <value>The name of the service provider associated with the merchant listed in the MATCH.</value>
        [DataMember(Name = "ServiceProvDBA", EmitDefaultValue = false)]
        public string ServiceProvDBA { get; set; }

        /// <summary>
        /// Website address of the merchant. A request may include multiple URLs . The total cumulative size of the URLs cannot exceed 20000 bytes.
        /// </summary>
        /// <value>Website address of the merchant. A request may include multiple URLs . The total cumulative size of the URLs cannot exceed 20000 bytes.</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public List<string> Url { get; set; }

        /// <summary>
        /// Gets or Sets Principal
        /// </summary>
        [DataMember(Name = "Principal", EmitDefaultValue = false)]
        public List<Principal> Principal { get; set; }

        /// <summary>
        /// A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
        /// </summary>
        /// <value>A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft</value>
        [DataMember(Name = "ReasonCode", IsRequired = true, EmitDefaultValue = false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Brief comments on why Merchant is added
        /// </summary>
        /// <value>Brief comments on why Merchant is added</value>
        [DataMember(Name = "Comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddMerchantMerchant {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DoingBusinessAsName: ").Append(DoingBusinessAsName).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantCategory: ").Append(MerchantCategory).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  AltPhoneNumber: ").Append(AltPhoneNumber).Append("\n");
            sb.Append("  NationalTaxId: ").Append(NationalTaxId).Append("\n");
            sb.Append("  CountrySubdivisionTaxId: ").Append(CountrySubdivisionTaxId).Append("\n");
            sb.Append("  CATFlag: ").Append(CATFlag).Append("\n");
            sb.Append("  DateOpened: ").Append(DateOpened).Append("\n");
            sb.Append("  DateClosed: ").Append(DateClosed).Append("\n");
            sb.Append("  ServiceProvLegal: ").Append(ServiceProvLegal).Append("\n");
            sb.Append("  ServiceProvDBA: ").Append(ServiceProvDBA).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddMerchantMerchant);
        }

        /// <summary>
        /// Returns true if AddMerchantMerchant instances are equal
        /// </summary>
        /// <param name="input">Instance of AddMerchantMerchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMerchantMerchant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DoingBusinessAsName == input.DoingBusinessAsName ||
                    (this.DoingBusinessAsName != null &&
                    this.DoingBusinessAsName.Equals(input.DoingBusinessAsName))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantCategory == input.MerchantCategory ||
                    (this.MerchantCategory != null &&
                    this.MerchantCategory.Equals(input.MerchantCategory))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.AltPhoneNumber == input.AltPhoneNumber ||
                    (this.AltPhoneNumber != null &&
                    this.AltPhoneNumber.Equals(input.AltPhoneNumber))
                ) && 
                (
                    this.NationalTaxId == input.NationalTaxId ||
                    (this.NationalTaxId != null &&
                    this.NationalTaxId.Equals(input.NationalTaxId))
                ) && 
                (
                    this.CountrySubdivisionTaxId == input.CountrySubdivisionTaxId ||
                    (this.CountrySubdivisionTaxId != null &&
                    this.CountrySubdivisionTaxId.Equals(input.CountrySubdivisionTaxId))
                ) && 
                (
                    this.CATFlag == input.CATFlag ||
                    this.CATFlag.Equals(input.CATFlag)
                ) && 
                (
                    this.DateOpened == input.DateOpened ||
                    (this.DateOpened != null &&
                    this.DateOpened.Equals(input.DateOpened))
                ) && 
                (
                    this.DateClosed == input.DateClosed ||
                    (this.DateClosed != null &&
                    this.DateClosed.Equals(input.DateClosed))
                ) && 
                (
                    this.ServiceProvLegal == input.ServiceProvLegal ||
                    (this.ServiceProvLegal != null &&
                    this.ServiceProvLegal.Equals(input.ServiceProvLegal))
                ) && 
                (
                    this.ServiceProvDBA == input.ServiceProvDBA ||
                    (this.ServiceProvDBA != null &&
                    this.ServiceProvDBA.Equals(input.ServiceProvDBA))
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url != null &&
                    input.Url != null &&
                    this.Url.SequenceEqual(input.Url)
                ) && 
                (
                    this.Principal == input.Principal ||
                    this.Principal != null &&
                    input.Principal != null &&
                    this.Principal.SequenceEqual(input.Principal)
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DoingBusinessAsName != null)
                    hashCode = hashCode * 59 + this.DoingBusinessAsName.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantCategory != null)
                    hashCode = hashCode * 59 + this.MerchantCategory.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.AltPhoneNumber != null)
                    hashCode = hashCode * 59 + this.AltPhoneNumber.GetHashCode();
                if (this.NationalTaxId != null)
                    hashCode = hashCode * 59 + this.NationalTaxId.GetHashCode();
                if (this.CountrySubdivisionTaxId != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisionTaxId.GetHashCode();
                hashCode = hashCode * 59 + this.CATFlag.GetHashCode();
                if (this.DateOpened != null)
                    hashCode = hashCode * 59 + this.DateOpened.GetHashCode();
                if (this.DateClosed != null)
                    hashCode = hashCode * 59 + this.DateClosed.GetHashCode();
                if (this.ServiceProvLegal != null)
                    hashCode = hashCode * 59 + this.ServiceProvLegal.GetHashCode();
                if (this.ServiceProvDBA != null)
                    hashCode = hashCode * 59 + this.ServiceProvDBA.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Principal != null)
                    hashCode = hashCode * 59 + this.Principal.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
