/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// TerminationInquiry
    /// </summary>
    [DataContract(Name = "TerminationInquiry")]
    public partial class TerminationInquiry : IEquatable<TerminationInquiry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminationInquiry" /> class.
        /// </summary>
        /// <param name="pageOffset">PageOffset for the inquiry done.</param>
        /// <param name="_ref">rReference URL to get inquiry.</param>
        /// <param name="transactionReferenceNumber">User-defined identifier for the inquiry submitted..</param>
        /// <param name="possibleMerchantMatches">possibleMerchantMatches.</param>
        /// <param name="possibleInquiryMatches">possibleInquiryMatches.</param>
        public TerminationInquiry(int pageOffset = default(int), string _ref = default(string), string transactionReferenceNumber = default(string), List<PossibleMerchantMatches> possibleMerchantMatches = default(List<PossibleMerchantMatches>), List<PossibleInquiryMatches> possibleInquiryMatches = default(List<PossibleInquiryMatches>))
        {
            this.PageOffset = pageOffset;
            this.Ref = _ref;
            this.TransactionReferenceNumber = transactionReferenceNumber;
            this.PossibleMerchantMatches = possibleMerchantMatches;
            this.PossibleInquiryMatches = possibleInquiryMatches;
        }

        /// <summary>
        /// PageOffset for the inquiry done
        /// </summary>
        /// <value>PageOffset for the inquiry done</value>
        [DataMember(Name = "PageOffset", EmitDefaultValue = false)]
        public int PageOffset { get; set; }

        /// <summary>
        /// rReference URL to get inquiry
        /// </summary>
        /// <value>rReference URL to get inquiry</value>
        [DataMember(Name = "Ref", EmitDefaultValue = false)]
        public string Ref { get; set; }

        /// <summary>
        /// User-defined identifier for the inquiry submitted.
        /// </summary>
        /// <value>User-defined identifier for the inquiry submitted.</value>
        [DataMember(Name = "TransactionReferenceNumber", EmitDefaultValue = false)]
        public string TransactionReferenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets PossibleMerchantMatches
        /// </summary>
        [DataMember(Name = "PossibleMerchantMatches", EmitDefaultValue = false)]
        public List<PossibleMerchantMatches> PossibleMerchantMatches { get; set; }

        /// <summary>
        /// Gets or Sets PossibleInquiryMatches
        /// </summary>
        [DataMember(Name = "PossibleInquiryMatches", EmitDefaultValue = false)]
        public List<PossibleInquiryMatches> PossibleInquiryMatches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TerminationInquiry {\n");
            sb.Append("  PageOffset: ").Append(PageOffset).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  TransactionReferenceNumber: ").Append(TransactionReferenceNumber).Append("\n");
            sb.Append("  PossibleMerchantMatches: ").Append(PossibleMerchantMatches).Append("\n");
            sb.Append("  PossibleInquiryMatches: ").Append(PossibleInquiryMatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminationInquiry);
        }

        /// <summary>
        /// Returns true if TerminationInquiry instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminationInquiry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminationInquiry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PageOffset == input.PageOffset ||
                    this.PageOffset.Equals(input.PageOffset)
                ) && 
                (
                    this.Ref == input.Ref ||
                    (this.Ref != null &&
                    this.Ref.Equals(input.Ref))
                ) && 
                (
                    this.TransactionReferenceNumber == input.TransactionReferenceNumber ||
                    (this.TransactionReferenceNumber != null &&
                    this.TransactionReferenceNumber.Equals(input.TransactionReferenceNumber))
                ) && 
                (
                    this.PossibleMerchantMatches == input.PossibleMerchantMatches ||
                    this.PossibleMerchantMatches != null &&
                    input.PossibleMerchantMatches != null &&
                    this.PossibleMerchantMatches.SequenceEqual(input.PossibleMerchantMatches)
                ) && 
                (
                    this.PossibleInquiryMatches == input.PossibleInquiryMatches ||
                    this.PossibleInquiryMatches != null &&
                    input.PossibleInquiryMatches != null &&
                    this.PossibleInquiryMatches.SequenceEqual(input.PossibleInquiryMatches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PageOffset.GetHashCode();
                if (this.Ref != null)
                    hashCode = hashCode * 59 + this.Ref.GetHashCode();
                if (this.TransactionReferenceNumber != null)
                    hashCode = hashCode * 59 + this.TransactionReferenceNumber.GetHashCode();
                if (this.PossibleMerchantMatches != null)
                    hashCode = hashCode * 59 + this.PossibleMerchantMatches.GetHashCode();
                if (this.PossibleInquiryMatches != null)
                    hashCode = hashCode * 59 + this.PossibleInquiryMatches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
