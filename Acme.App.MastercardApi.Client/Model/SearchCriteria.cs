/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// SearchCriteria
    /// </summary>
    [DataContract(Name = "SearchCriteria")]
    public partial class SearchCriteria : IEquatable<SearchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteria" /> class.
        /// </summary>
        /// <param name="searchAll">Determines if the inquiry is worldwide or not.  The Inquiry request can be either worldwide or Regions and/or Countries based. It cannot be both.  If it is not worldwide search (SearchAll &#x3D; N) and if both  Region and Country are not specified, then search will happen for USA (required).</param>
        /// <param name="region">region.</param>
        /// <param name="country">country.</param>
        /// <param name="minPossibleMatchCount">Determines how many minimum matches present for a merchant or inquiry to appear in the results..</param>
        public SearchCriteria(string searchAll = default(string), List<string> region = default(List<string>), List<string> country = default(List<string>), string minPossibleMatchCount = default(string))
        {
            // to ensure "searchAll" is required (not null)
            this.SearchAll = searchAll ?? throw new ArgumentNullException("searchAll is a required property for SearchCriteria and cannot be null");
            this.Region = region;
            this.Country = country;
            this.MinPossibleMatchCount = minPossibleMatchCount;
        }

        /// <summary>
        /// Determines if the inquiry is worldwide or not.  The Inquiry request can be either worldwide or Regions and/or Countries based. It cannot be both.  If it is not worldwide search (SearchAll &#x3D; N) and if both  Region and Country are not specified, then search will happen for USA
        /// </summary>
        /// <value>Determines if the inquiry is worldwide or not.  The Inquiry request can be either worldwide or Regions and/or Countries based. It cannot be both.  If it is not worldwide search (SearchAll &#x3D; N) and if both  Region and Country are not specified, then search will happen for USA</value>
        [DataMember(Name = "SearchAll", IsRequired = true, EmitDefaultValue = false)]
        public string SearchAll { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public List<string> Region { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public List<string> Country { get; set; }

        /// <summary>
        /// Determines how many minimum matches present for a merchant or inquiry to appear in the results.
        /// </summary>
        /// <value>Determines how many minimum matches present for a merchant or inquiry to appear in the results.</value>
        [DataMember(Name = "MinPossibleMatchCount", EmitDefaultValue = false)]
        public string MinPossibleMatchCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteria {\n");
            sb.Append("  SearchAll: ").Append(SearchAll).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  MinPossibleMatchCount: ").Append(MinPossibleMatchCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteria);
        }

        /// <summary>
        /// Returns true if SearchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchAll == input.SearchAll ||
                    (this.SearchAll != null &&
                    this.SearchAll.Equals(input.SearchAll))
                ) && 
                (
                    this.Region == input.Region ||
                    this.Region != null &&
                    input.Region != null &&
                    this.Region.SequenceEqual(input.Region)
                ) && 
                (
                    this.Country == input.Country ||
                    this.Country != null &&
                    input.Country != null &&
                    this.Country.SequenceEqual(input.Country)
                ) && 
                (
                    this.MinPossibleMatchCount == input.MinPossibleMatchCount ||
                    (this.MinPossibleMatchCount != null &&
                    this.MinPossibleMatchCount.Equals(input.MinPossibleMatchCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchAll != null)
                    hashCode = hashCode * 59 + this.SearchAll.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.MinPossibleMatchCount != null)
                    hashCode = hashCode * 59 + this.MinPossibleMatchCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
