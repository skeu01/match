/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// DriversLicense
    /// </summary>
    [DataContract(Name = "DriversLicense")]
    public partial class DriversLicense : IEquatable<DriversLicense>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DriversLicense" /> class.
        /// </summary>
        /// <param name="number">The drivers license number of a principal owner. Required when Drivers License Country is provided. Should not be provided if Drivers License Country is not provided..</param>
        /// <param name="countrySubdivision">The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is &#39;USA&#39; . Should not be provided for non-US Drivers License Country..</param>
        /// <param name="country">The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided..</param>
        public DriversLicense(string number = default(string), string countrySubdivision = default(string), string country = default(string))
        {
            this.Number = number;
            this.CountrySubdivision = countrySubdivision;
            this.Country = country;
        }

        /// <summary>
        /// The drivers license number of a principal owner. Required when Drivers License Country is provided. Should not be provided if Drivers License Country is not provided.
        /// </summary>
        /// <value>The drivers license number of a principal owner. Required when Drivers License Country is provided. Should not be provided if Drivers License Country is not provided.</value>
        [DataMember(Name = "Number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is &#39;USA&#39; . Should not be provided for non-US Drivers License Country.
        /// </summary>
        /// <value>The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is &#39;USA&#39; . Should not be provided for non-US Drivers License Country.</value>
        [DataMember(Name = "CountrySubdivision", EmitDefaultValue = false)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.
        /// </summary>
        /// <value>The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DriversLicense {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CountrySubdivision: ").Append(CountrySubdivision).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DriversLicense);
        }

        /// <summary>
        /// Returns true if DriversLicense instances are equal
        /// </summary>
        /// <param name="input">Instance of DriversLicense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DriversLicense input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.CountrySubdivision == input.CountrySubdivision ||
                    (this.CountrySubdivision != null &&
                    this.CountrySubdivision.Equals(input.CountrySubdivision))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.CountrySubdivision != null)
                    hashCode = hashCode * 59 + this.CountrySubdivision.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
