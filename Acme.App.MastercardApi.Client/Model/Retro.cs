/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// Retro
    /// </summary>
    [DataContract(Name = "Retro")]
    public partial class Retro : IEquatable<Retro>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Retro" /> class.
        /// </summary>
        /// <param name="refNum">The reference number of retroactive inquiry. Using this reference number, the details can be obtained..</param>
        /// <param name="date">Date on which the retro inquiry was made. This will be in MM/DD/YYYY format..</param>
        /// <param name="businessName">Name of Merchant or Business corresponds to retro inquiry..</param>
        /// <param name="city">The name of the city for the merchant location corresponds to retro inquiry..</param>
        /// <param name="state">The abbreviated state for a merchant location corresponds to retro inquiry..</param>
        /// <param name="country">The three digit country code corresponds to retro inquiry. Valid values are Three digit alpha country codes as defined in ISO 3166-1..</param>
        public Retro(string refNum = default(string), string date = default(string), string businessName = default(string), string city = default(string), string state = default(string), string country = default(string))
        {
            this.RefNum = refNum;
            this.Date = date;
            this.BusinessName = businessName;
            this.City = city;
            this.State = state;
            this.Country = country;
        }

        /// <summary>
        /// The reference number of retroactive inquiry. Using this reference number, the details can be obtained.
        /// </summary>
        /// <value>The reference number of retroactive inquiry. Using this reference number, the details can be obtained.</value>
        [DataMember(Name = "RefNum", EmitDefaultValue = false)]
        public string RefNum { get; set; }

        /// <summary>
        /// Date on which the retro inquiry was made. This will be in MM/DD/YYYY format.
        /// </summary>
        /// <value>Date on which the retro inquiry was made. This will be in MM/DD/YYYY format.</value>
        [DataMember(Name = "Date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Name of Merchant or Business corresponds to retro inquiry.
        /// </summary>
        /// <value>Name of Merchant or Business corresponds to retro inquiry.</value>
        [DataMember(Name = "BusinessName", EmitDefaultValue = false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// The name of the city for the merchant location corresponds to retro inquiry.
        /// </summary>
        /// <value>The name of the city for the merchant location corresponds to retro inquiry.</value>
        [DataMember(Name = "City", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The abbreviated state for a merchant location corresponds to retro inquiry.
        /// </summary>
        /// <value>The abbreviated state for a merchant location corresponds to retro inquiry.</value>
        [DataMember(Name = "State", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The three digit country code corresponds to retro inquiry. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
        /// </summary>
        /// <value>The three digit country code corresponds to retro inquiry. Valid values are Three digit alpha country codes as defined in ISO 3166-1.</value>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Retro {\n");
            sb.Append("  RefNum: ").Append(RefNum).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Retro);
        }

        /// <summary>
        /// Returns true if Retro instances are equal
        /// </summary>
        /// <param name="input">Instance of Retro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Retro input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RefNum == input.RefNum ||
                    (this.RefNum != null &&
                    this.RefNum.Equals(input.RefNum))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefNum != null)
                    hashCode = hashCode * 59 + this.RefNum.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
