/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Acme.App.MastercardApi.Client.Client;
using Acme.App.MastercardApi.Client.Model;

namespace Acme.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryRequestApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation.
        /// </summary>
        /// <remarks>
        /// Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <returns>RetroResponseSchema</returns>
        RetroResponseSchema RetroRetroListPost(string format, RetroRequestSchema retroRequestSchema);

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation.
        /// </summary>
        /// <remarks>
        /// Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <returns>ApiResponse of RetroResponseSchema</returns>
        ApiResponse<RetroResponseSchema> RetroRetroListPostWithHttpInfo(string format, RetroRequestSchema retroRequestSchema);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryRequestApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation.
        /// </summary>
        /// <remarks>
        /// Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetroResponseSchema</returns>
        System.Threading.Tasks.Task<RetroResponseSchema> RetroRetroListPostAsync(string format, RetroRequestSchema retroRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation.
        /// </summary>
        /// <remarks>
        /// Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetroResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetroResponseSchema>> RetroRetroListPostWithHttpInfoAsync(string format, RetroRequestSchema retroRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryRequestApi : IRetroactiveInquiryRequestApiSync, IRetroactiveInquiryRequestApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RetroactiveInquiryRequestApi : IRetroactiveInquiryRequestApi
    {
        private Acme.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetroactiveInquiryRequestApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetroactiveInquiryRequestApi(String basePath)
        {
            this.Configuration = Acme.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Acme.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Acme.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryRequestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RetroactiveInquiryRequestApi(Acme.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Acme.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Acme.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryRequestApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RetroactiveInquiryRequestApi(Acme.App.MastercardApi.Client.Client.ISynchronousClient client, Acme.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Acme.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Acme.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation. Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <returns>RetroResponseSchema</returns>
        public RetroResponseSchema RetroRetroListPost(string format, RetroRequestSchema retroRequestSchema)
        {
            Acme.App.MastercardApi.Client.Client.ApiResponse<RetroResponseSchema> localVarResponse = RetroRetroListPostWithHttpInfo(format, retroRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation. Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <returns>ApiResponse of RetroResponseSchema</returns>
        public Acme.App.MastercardApi.Client.Client.ApiResponse<RetroResponseSchema> RetroRetroListPostWithHttpInfo(string format, RetroRequestSchema retroRequestSchema)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'format' when calling RetroactiveInquiryRequestApi->RetroRetroListPost");

            // verify the required parameter 'retroRequestSchema' is set
            if (retroRequestSchema == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'retroRequestSchema' when calling RetroactiveInquiryRequestApi->RetroRetroListPost");

            Acme.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Acme.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "Format", format));
            localVarRequestOptions.Data = retroRequestSchema;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RetroResponseSchema>("/retro/retro-list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetroRetroListPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation. Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetroResponseSchema</returns>
        public async System.Threading.Tasks.Task<RetroResponseSchema> RetroRetroListPostAsync(string format, RetroRequestSchema retroRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Acme.App.MastercardApi.Client.Client.ApiResponse<RetroResponseSchema> localVarResponse = await RetroRetroListPostWithHttpInfoAsync(format, retroRequestSchema, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ##### The retroactive inquiry helps acquirer to retrieve list of termination inquiry matches made within 360 days of inquiry initiation. Return the summary of Retroactive Inquiry matches for the given Acquirer. Even if initial inquiry (TerminationInquiryRequest) does not result in a possible match, there after it&#39;s still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another/same acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) &lt;br&gt;&lt;br&gt; #### Note: (a)  Each day, MATCH automatically conducts a retroactive Inquiry search on every merchant on which the acquirer has submitted an inquiry. MATCH automatically deletes each retroactive inquiry match after seven days. Therefore, acquirers should view retroactive inquiries every day to be sure that they do not miss a possible match. &lt;br&gt; (b)  When there are no results for RetroActive inquiry, users will get in response HTTP status code of 400 and a response code of “RESPONSE_DATA_NORESULT”. For information around all error codes refer [Code and Formats](/match/documentation/code-and-formats) documentation page &lt;br&gt;&lt;br&gt; To understand the working of RetroActive API use case, follow the steps mentioned below: &lt;br&gt; 1.  Acquirer A (AcquirerId &#x3D; 1996) uses a TerminationInquiryRequest for a merchant “X Inc”  but doesn’t find a match. &lt;br&gt; 2.  Within the next 360 days, same/another Acquirer (use same AcquirerId &#x3D; 1996, as we have only one acquirer in sandbox) adds a terminated merchant “X Inc”, who matches the search parameters used by Acquirer A.  &lt;br&gt; 3.  After adding the merchant, it takes one day for Match Service to process retroactive inquiry match. &lt;br&gt; 4.  Post processing, within the next 7 days, Acquirer A should use the Retroactive Inquiry API to retrieve a list of retroactive matches.  &lt;br&gt; 5.  This list of retroactive inquiry matches includes an Inquiry reference number, which the Acquirer A can use to get more details of match using RetroActive Inquiry Details API.  
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="retroRequestSchema">The retro request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetroResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Acme.App.MastercardApi.Client.Client.ApiResponse<RetroResponseSchema>> RetroRetroListPostWithHttpInfoAsync(string format, RetroRequestSchema retroRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'format' when calling RetroactiveInquiryRequestApi->RetroRetroListPost");

            // verify the required parameter 'retroRequestSchema' is set
            if (retroRequestSchema == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'retroRequestSchema' when calling RetroactiveInquiryRequestApi->RetroRetroListPost");


            Acme.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Acme.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "Format", format));
            localVarRequestOptions.Data = retroRequestSchema;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RetroResponseSchema>("/retro/retro-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetroRetroListPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
