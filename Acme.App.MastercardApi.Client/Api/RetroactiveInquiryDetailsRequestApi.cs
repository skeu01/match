/*
 * MATCH API
 *
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Acme.App.MastercardApi.Client.Client;
using Acme.App.MastercardApi.Client.Model;

namespace Acme.App.MastercardApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryDetailsRequestApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ##### Retrieve retro inquiry search results
        /// </summary>
        /// <remarks>
        /// The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <returns>RetroInquiryResponseSchema</returns>
        RetroInquiryResponseSchema RetroRetroInquiryDetailsPost(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema);

        /// <summary>
        /// ##### Retrieve retro inquiry search results
        /// </summary>
        /// <remarks>
        /// The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <returns>ApiResponse of RetroInquiryResponseSchema</returns>
        ApiResponse<RetroInquiryResponseSchema> RetroRetroInquiryDetailsPostWithHttpInfo(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryDetailsRequestApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ##### Retrieve retro inquiry search results
        /// </summary>
        /// <remarks>
        /// The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetroInquiryResponseSchema</returns>
        System.Threading.Tasks.Task<RetroInquiryResponseSchema> RetroRetroInquiryDetailsPostAsync(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ##### Retrieve retro inquiry search results
        /// </summary>
        /// <remarks>
        /// The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </remarks>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetroInquiryResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetroInquiryResponseSchema>> RetroRetroInquiryDetailsPostWithHttpInfoAsync(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetroactiveInquiryDetailsRequestApi : IRetroactiveInquiryDetailsRequestApiSync, IRetroactiveInquiryDetailsRequestApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RetroactiveInquiryDetailsRequestApi : IRetroactiveInquiryDetailsRequestApi
    {
        private Acme.App.MastercardApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryDetailsRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetroactiveInquiryDetailsRequestApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryDetailsRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetroactiveInquiryDetailsRequestApi(String basePath)
        {
            this.Configuration = Acme.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Acme.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                new Acme.App.MastercardApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryDetailsRequestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RetroactiveInquiryDetailsRequestApi(Acme.App.MastercardApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Acme.App.MastercardApi.Client.Client.Configuration.MergeConfigurations(
                Acme.App.MastercardApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Acme.App.MastercardApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetroactiveInquiryDetailsRequestApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RetroactiveInquiryDetailsRequestApi(Acme.App.MastercardApi.Client.Client.ISynchronousClient client, Acme.App.MastercardApi.Client.Client.IAsynchronousClient asyncClient, Acme.App.MastercardApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Acme.App.MastercardApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Acme.App.MastercardApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Acme.App.MastercardApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ##### Retrieve retro inquiry search results The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <returns>RetroInquiryResponseSchema</returns>
        public RetroInquiryResponseSchema RetroRetroInquiryDetailsPost(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema)
        {
            Acme.App.MastercardApi.Client.Client.ApiResponse<RetroInquiryResponseSchema> localVarResponse = RetroRetroInquiryDetailsPostWithHttpInfo(format, acquirerId, retroInquiryRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ##### Retrieve retro inquiry search results The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <returns>ApiResponse of RetroInquiryResponseSchema</returns>
        public Acme.App.MastercardApi.Client.Client.ApiResponse<RetroInquiryResponseSchema> RetroRetroInquiryDetailsPostWithHttpInfo(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'format' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");

            // verify the required parameter 'acquirerId' is set
            if (acquirerId == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'acquirerId' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");

            // verify the required parameter 'retroInquiryRequestSchema' is set
            if (retroInquiryRequestSchema == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'retroInquiryRequestSchema' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");

            Acme.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Acme.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "Format", format));
            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "AcquirerId", acquirerId));
            localVarRequestOptions.Data = retroInquiryRequestSchema;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RetroInquiryResponseSchema>("/retro/retro-inquiry-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetroRetroInquiryDetailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ##### Retrieve retro inquiry search results The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetroInquiryResponseSchema</returns>
        public async System.Threading.Tasks.Task<RetroInquiryResponseSchema> RetroRetroInquiryDetailsPostAsync(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Acme.App.MastercardApi.Client.Client.ApiResponse<RetroInquiryResponseSchema> localVarResponse = await RetroRetroInquiryDetailsPostWithHttpInfoAsync(format, acquirerId, retroInquiryRequestSchema, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ##### Retrieve retro inquiry search results The acquirer uses the Retroactive Inquiry API to retrieve a list of Retroactive Inquiry Reference Numbers which matched the acquirer’s previous termination inquiries. The acquirer then uses Retroactive Inquiry Details API to fetch details of the matches for each from previous inquiries. Details about merchant match includes information, such as, if a Merchant has been terminated by another acquirer after an inquiry was made, the reason for termination, and the history of fraudulent or risky business practices that led to that termination. For further details refer the documentation on [Use Cases.](/match/documentation/use-cases) 
        /// </summary>
        /// <exception cref="Acme.App.MastercardApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Describes format of the response you wants to serverd, response can be delevired either as XML or JSON.</param>
        /// <param name="acquirerId">The Member ICA number which is used to validate that the application has permission to hit the MATCH database. This number must be obtained from a participating MATCH acquiring bank or entity before a developer can access the MATCH resource.</param>
        /// <param name="retroInquiryRequestSchema">The retro inquiry request object</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetroInquiryResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Acme.App.MastercardApi.Client.Client.ApiResponse<RetroInquiryResponseSchema>> RetroRetroInquiryDetailsPostWithHttpInfoAsync(string format, string acquirerId, RetroInquiryRequestSchema retroInquiryRequestSchema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'format' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");

            // verify the required parameter 'acquirerId' is set
            if (acquirerId == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'acquirerId' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");

            // verify the required parameter 'retroInquiryRequestSchema' is set
            if (retroInquiryRequestSchema == null)
                throw new Acme.App.MastercardApi.Client.Client.ApiException(400, "Missing required parameter 'retroInquiryRequestSchema' when calling RetroactiveInquiryDetailsRequestApi->RetroRetroInquiryDetailsPost");


            Acme.App.MastercardApi.Client.Client.RequestOptions localVarRequestOptions = new Acme.App.MastercardApi.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Acme.App.MastercardApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "Format", format));
            localVarRequestOptions.QueryParameters.Add(Acme.App.MastercardApi.Client.Client.ClientUtils.ParameterToMultiMap("", "AcquirerId", acquirerId));
            localVarRequestOptions.Data = retroInquiryRequestSchema;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RetroInquiryResponseSchema>("/retro/retro-inquiry-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetroRetroInquiryDetailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
